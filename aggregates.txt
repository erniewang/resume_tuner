[0] Designed and implemented a web application that video-captures poses and modifies a music loop using PoseNet (p5.js)
[1] Engineered real-time tempo approximator that measures the rhythm of motion utilizing a FFT a velocity time series that pitch shifts, alter playbackrate, and changes the volume of the audio accordingly
[2] Integrated with Vampnet that will continously generate new music based off the standard deviation over the range of motion
[3] Utilized a Node server that recieves motion data from the browser via websocket emits to perform more intensive mathemticaly operations on the time series data
[4] Developed a adjustable parameters such as normilization, and frames per second that allow the frontend application to adapt to the speed, height, and size of the dancer
[6] Demoed the application at Evanston's BitCrush 2025 event, gauged user feedback and submitted plans for improvement
핧
[0] Developed a web application utilizing FastAPI, enabling musicians to upload melodies in MusicXML/MXL format and download modified XML files with melodies harmonized programmatically to the existing and custom harmonic rules.
[1] Provided a heuristics modifier supporting thousands of note-chord combinations and common harmonization options
[2] Stored user-defined presets in browser local storage, with future plans to server side storage
[3] Conducted extensive test cases to handle edge cases, enabling a cyclical development process as new chords were added and encountered.
[4] Implemented RESTful APIs to manage XML and musicXML file exchange and streamline client-server communication.
[5] Built a customizable fallback algorithm that harmonizes and writes for notes for notes that were missed in previous runs
[6] Developed custom XML parser optimized for MusicXML format with error handling for malformed music files.
[7] Lauched a website built with Flask that allows users to name and share their custom harmonization algorithms inspired by npm's package directory
핧
[0] Developed a desktop application that selects attributes of experiences and projects that best fit given a job description.
[1] Built cross-platform Electron/React application with TailwindCSS for dynamic resume optimization.
[2] Implemented an AI pipeline processing resume section by section while managing API rate limits.
[3] Included a option keyword extration preprocessing storage to select relevant keywords to utilize in resume filtering.
[4] Developed interactive suggestion review system in the UI with Accept/Reject/Edit options for each AI-generated resume improvement.
[5] Developed plugin-based architecture supporting multiple AI providers with encrypted local storage and model version control.
핧
[0] Developed a music recommendation platform integrating OpenAI's GPT API with the Spotify's Web API, enabling dynamic playlist generation from natural language queries.
[1] Implemented relational data persistence using Amazon RDS (MySQL), storing user accounts, playlists, and historical queries to enhance personalization
[2] Deployed backend services on Amazon EC2, handling user authentication and API communication
[3] Designed and documented a RESTful API with endpoints for song discovery, listing favorites, history, catalog reset, and recommendation refinement.
[4] Built sentiment analysis pipeline using OpenAI embeddings to categorize user music preferences and mood-based recommendations.
[5] Implemented OAuth 2.0 integration with Spotify for secure user authentication and playlist management permissions.
[6] Created Redis caching layer to optimize API response times and reduce external API calls by 60%.
[7] Developed Node.js middleware for rate limiting and error handling to ensure stable service performance under high load.
[8] Built comprehensive logging system using Winston to track user interactions and API performance metrics for analytics.
핧
[0] Evaluated and ranked outputs from Scale AI's LLM, offering detailed feedback on ethical considerations, language clarity, and visual coherence.
[1] Ensured responses met factual accuracy standards to improve AI model performance and reliability.
[2] Developed comprehensive evaluation rubrics and scoring systems to standardize assessment of AI-generated content across multiple domains.
[3] Collaborated with cross-functional teams to identify bias patterns and recommend model training improvements for better ethical alignment.
[4] Analyzed statistical trends in AI output quality using Python data analysis tools to provide actionable insights for model optimization.
[5] Created detailed annotation guidelines and training materials for new evaluators to maintain consistency in AI training data quality.
[6] Performed comparative analysis between different AI model versions to track improvement metrics and performance degradation patterns.
핧
[0] Performed with Northwestern University Jazz Orchestra (2020–2024) and in a variety of university bands, featuring both live and virtual gigs.
[1] Utilized AI music generation tools (Musicfy, Udio) alongside custom scripts to explore digital composition and arrangement.
[2] Conducted private lessons, teaching saxophone/clarinet fundamentals and improvisational listening skills to a broad range of students.
[3] Developed custom Python scripts for MIDI manipulation and automated music arrangement using music21 library for compositional workflows.
[4] Created video content and tutorials for online music education platforms, reaching over 500 students across different skill levels.
[5] Collaborated with local recording studios to produce and engineer demo recordings for emerging artists and university music programs.
[6] Built personal brand through social media presence and live streaming performances, growing audience engagement by 200% over two years.
[7] Organized and led jazz masterclasses and workshops for high school music programs, focusing on improvisation and ensemble playing techniques.